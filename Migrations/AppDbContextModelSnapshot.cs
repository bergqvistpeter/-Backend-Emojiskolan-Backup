// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.Emoji", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.ToTable("Emojis");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Glad",
                            LevelId = 1,
                            Symbol = "🙂"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Ledsen",
                            LevelId = 1,
                            Symbol = "😢"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Arg",
                            LevelId = 1,
                            Symbol = "😠"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Kär",
                            LevelId = 1,
                            Symbol = "😍"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Förvånad",
                            LevelId = 1,
                            Symbol = "😮"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Blinkar",
                            LevelId = 1,
                            Symbol = "😉"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Cool",
                            LevelId = 1,
                            Symbol = "😎"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Skrattar",
                            LevelId = 1,
                            Symbol = "😂"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Snäll",
                            LevelId = 1,
                            Symbol = "😇"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Sover",
                            LevelId = 1,
                            Symbol = "😴"
                        });
                });

            modelBuilder.Entity("backend.Models.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Number = 1
                        },
                        new
                        {
                            Id = 2,
                            Number = 2
                        },
                        new
                        {
                            Id = 3,
                            Number = 3
                        },
                        new
                        {
                            Id = 4,
                            Number = 4
                        },
                        new
                        {
                            Id = 5,
                            Number = 5
                        },
                        new
                        {
                            Id = 6,
                            Number = 6
                        },
                        new
                        {
                            Id = 7,
                            Number = 7
                        },
                        new
                        {
                            Id = 8,
                            Number = 8
                        },
                        new
                        {
                            Id = 9,
                            Number = 9
                        },
                        new
                        {
                            Id = 10,
                            Number = 10
                        });
                });

            modelBuilder.Entity("backend.Models.Record", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<int>("Rounds")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("UserId");

                    b.ToTable("Records");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LevelId = 1,
                            Rounds = 12,
                            Time = 45,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvatarId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvatarId = 1,
                            Email = "jerry@test.com",
                            Level = 1,
                            PasswordHash = "hashedpassword",
                            Username = "jerry"
                        });
                });

            modelBuilder.Entity("backend.Models.Emoji", b =>
                {
                    b.HasOne("backend.Models.Level", "Level")
                        .WithMany("Emojis")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");
                });

            modelBuilder.Entity("backend.Models.Record", b =>
                {
                    b.HasOne("backend.Models.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("Records")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Level", b =>
                {
                    b.Navigation("Emojis");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("Records");
                });
#pragma warning restore 612, 618
        }
    }
}
